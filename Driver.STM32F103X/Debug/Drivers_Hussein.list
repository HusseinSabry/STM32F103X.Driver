
Drivers_Hussein.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a24  08000a2c  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a24  08000a24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a2c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a2c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004074  00000000  00000000  00010a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a26  00000000  00000000  00014ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b10  00000000  00000000  000154ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d8  00000000  00000000  00016000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  000161d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001447  00000000  00000000  00016358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002200  00000000  00000000  0001779f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b010  00000000  00000000  0001999f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000249af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005cc  00000000  00000000  00024a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009f4 	.word	0x080009f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009f4 	.word	0x080009f4

08000170 <Clk_Init>:


}

void Clk_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clk_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clk_Init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clk_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clk_Init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clk_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clk_Init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <Hussein_IRQ_Callback>:


unsigned char ch;

void Hussein_IRQ_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, (uint16_t*) &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <Hussein_IRQ_Callback+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <Hussein_IRQ_Callback+0x20>)
 80001ae:	f000 fb57 	bl	8000860 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1,(uint16_t*) &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <Hussein_IRQ_Callback+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <Hussein_IRQ_Callback+0x20>)
 80001b8:	f000 fb30 	bl	800081c <MCAL_UART_SendData>



}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	40013800 	.word	0x40013800

080001c8 <main>:
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	USART_Coinf uartCFG;
	Clk_Init();
 80001ce:	f7ff ffcf 	bl	8000170 <Clk_Init>


	uartCFG.BaudRate = USART_BaudRate_115200;
 80001d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d6:	60bb      	str	r3, [r7, #8]
	uartCFG.HWFlowCTL = USART_HWFLOWCTL_NONE;
 80001d8:	2300      	movs	r3, #0
 80001da:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_ENABLE = USART_IRQ_ENABLE_RXNEIE;
 80001dc:	2320      	movs	r3, #32
 80001de:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CALLBACK = Hussein_IRQ_Callback;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0x40>)
 80001e2:	617b      	str	r3, [r7, #20]
	uartCFG.Parity = USART_Parity_NONE;
 80001e4:	2300      	movs	r3, #0
 80001e6:	737b      	strb	r3, [r7, #13]
	uartCFG.PayLoadLenght = USART_PayLoad_Length_8B;
 80001e8:	2300      	movs	r3, #0
 80001ea:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = USART_STOP_ONE;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode =USART_Mode_TX_RX;
 80001f0:	230c      	movs	r3, #12
 80001f2:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART1,&uartCFG);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x44>)
 80001fa:	f000 fa61 	bl	80006c0 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x44>)
 8000200:	f000 fb5c 	bl	80008bc <MCAL_UART_GPIO_Set_Pins>




	while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
 8000206:	bf00      	nop
 8000208:	080001a5 	.word	0x080001a5
 800020c:	40013800 	.word	0x40013800

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fbb5 	bl	80009ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffc1 	bl	80001c8 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000a2c 	.word	0x08000a2c
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	20000060 	.word	0x20000060

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>

08000262 <GET_CRLH_Position>:

#include <Stm32_f103_c6_GPIO_Driver.h>


uint8_t GET_CRLH_Position (uint16_t PinNumber)
{
 8000262:	b480      	push	{r7}
 8000264:	b083      	sub	sp, #12
 8000266:	af00      	add	r7, sp, #0
 8000268:	4603      	mov	r3, r0
 800026a:	80fb      	strh	r3, [r7, #6]

	if (PinNumber == GPIO_PIN_0)
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d101      	bne.n	8000276 <GET_CRLH_Position+0x14>
	{
		return 0;
 8000272:	2300      	movs	r3, #0
 8000274:	e053      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_1)
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	2b02      	cmp	r3, #2
 800027a:	d101      	bne.n	8000280 <GET_CRLH_Position+0x1e>
	{
		return 4;
 800027c:	2304      	movs	r3, #4
 800027e:	e04e      	b.n	800031e <GET_CRLH_Position+0xbc>

	}
	else if (PinNumber == GPIO_PIN_2)
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	2b04      	cmp	r3, #4
 8000284:	d101      	bne.n	800028a <GET_CRLH_Position+0x28>
	{

		return 8;
 8000286:	2308      	movs	r3, #8
 8000288:	e049      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_3)
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	2b08      	cmp	r3, #8
 800028e:	d101      	bne.n	8000294 <GET_CRLH_Position+0x32>
	{
		return 12;
 8000290:	230c      	movs	r3, #12
 8000292:	e044      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_4)
 8000294:	88fb      	ldrh	r3, [r7, #6]
 8000296:	2b10      	cmp	r3, #16
 8000298:	d101      	bne.n	800029e <GET_CRLH_Position+0x3c>
	{
		return 16;
 800029a:	2310      	movs	r3, #16
 800029c:	e03f      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_5)
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	2b20      	cmp	r3, #32
 80002a2:	d101      	bne.n	80002a8 <GET_CRLH_Position+0x46>
	{
		return 20;
 80002a4:	2314      	movs	r3, #20
 80002a6:	e03a      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_6)
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	2b40      	cmp	r3, #64	; 0x40
 80002ac:	d101      	bne.n	80002b2 <GET_CRLH_Position+0x50>
	{
		return 24;
 80002ae:	2318      	movs	r3, #24
 80002b0:	e035      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_7)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b80      	cmp	r3, #128	; 0x80
 80002b6:	d101      	bne.n	80002bc <GET_CRLH_Position+0x5a>
	{
		return 28;
 80002b8:	231c      	movs	r3, #28
 80002ba:	e030      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_8)
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002c2:	d101      	bne.n	80002c8 <GET_CRLH_Position+0x66>
	{
		return 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	e02a      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_9)
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002ce:	d101      	bne.n	80002d4 <GET_CRLH_Position+0x72>
	{
		return 4;
 80002d0:	2304      	movs	r3, #4
 80002d2:	e024      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_10)
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002da:	d101      	bne.n	80002e0 <GET_CRLH_Position+0x7e>
	{
		return 8;
 80002dc:	2308      	movs	r3, #8
 80002de:	e01e      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_11)
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e6:	d101      	bne.n	80002ec <GET_CRLH_Position+0x8a>
	{
		return 12;
 80002e8:	230c      	movs	r3, #12
 80002ea:	e018      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_12)
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002f2:	d101      	bne.n	80002f8 <GET_CRLH_Position+0x96>
	{
		return 16;
 80002f4:	2310      	movs	r3, #16
 80002f6:	e012      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_13)
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002fe:	d101      	bne.n	8000304 <GET_CRLH_Position+0xa2>
	{
		return 20;
 8000300:	2314      	movs	r3, #20
 8000302:	e00c      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_14)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800030a:	d101      	bne.n	8000310 <GET_CRLH_Position+0xae>
	{
		return 24;
 800030c:	2318      	movs	r3, #24
 800030e:	e006      	b.n	800031e <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_15)
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000316:	d101      	bne.n	800031c <GET_CRLH_Position+0xba>
	{
		return 28;
 8000318:	231c      	movs	r3, #28
 800031a:	e000      	b.n	800031e <GET_CRLH_Position+0xbc>
	}else
	return 0;
 800031c:	2300      	movs	r3, #0


}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <MCAL_GPIO_INIT>:

//}

// SET GPIO PIN
void MCAL_GPIO_INIT(GPIO_Type_Def* GPIOX,GPIO_PinConfig_t* pin_config)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	//PIN confi. low from  0---->7
	//PIN confi. high from 8---->15

	volatile uint32_t* configregerster =NULL;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config =0;
 8000336:	2300      	movs	r3, #0
 8000338:	73fb      	strb	r3, [r7, #15]
	configregerster = (pin_config->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOX->CRL : &GPIOX->CRH;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d801      	bhi.n	8000346 <MCAL_GPIO_INIT+0x1e>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	e001      	b.n	800034a <MCAL_GPIO_INIT+0x22>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3304      	adds	r3, #4
 800034a:	60bb      	str	r3, [r7, #8]


	if( (pin_config->GPIO_Mode == GPIO_MODE_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_output_push_pull)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_push_pull))
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	2b05      	cmp	r3, #5
 8000352:	d00b      	beq.n	800036c <MCAL_GPIO_INIT+0x44>
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d007      	beq.n	800036c <MCAL_GPIO_INIT+0x44>
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	2b07      	cmp	r3, #7
 8000362:	d003      	beq.n	800036c <MCAL_GPIO_INIT+0x44>
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	2b06      	cmp	r3, #6
 800036a:	d10e      	bne.n	800038a <MCAL_GPIO_INIT+0x62>
	{

		PIN_config = ((((pin_config->GPIO_Mode -4) <<2 ) | (pin_config->GPIO_SPEED_OUT)) & 0X0f);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	789b      	ldrb	r3, [r3, #2]
 8000370:	3b04      	subs	r3, #4
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	b25a      	sxtb	r2, r3
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	78db      	ldrb	r3, [r3, #3]
 800037a:	b25b      	sxtb	r3, r3
 800037c:	4313      	orrs	r3, r2
 800037e:	b25b      	sxtb	r3, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f003 030f 	and.w	r3, r3, #15
 8000386:	73fb      	strb	r3, [r7, #15]
 8000388:	e02c      	b.n	80003e4 <MCAL_GPIO_INIT+0xbc>

	}
	else
	{
		if((pin_config->GPIO_Mode == GPIO_MODE_INPUT_FLO)||pin_config->GPIO_Mode == GPIO_MODE_Analog)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	789b      	ldrb	r3, [r3, #2]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d003      	beq.n	800039a <MCAL_GPIO_INIT+0x72>
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	789b      	ldrb	r3, [r3, #2]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d107      	bne.n	80003aa <MCAL_GPIO_INIT+0x82>
		{
			PIN_config = ((((pin_config->GPIO_Mode)<<2)| 0x0)&0x0f);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	789b      	ldrb	r3, [r3, #2]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e01c      	b.n	80003e4 <MCAL_GPIO_INIT+0xbc>





		}else if (pin_config->GPIO_Mode == GPIO_MODE_AF_INPUT)
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	789b      	ldrb	r3, [r3, #2]
 80003ae:	2b08      	cmp	r3, #8
 80003b0:	d102      	bne.n	80003b8 <MCAL_GPIO_INIT+0x90>
		{
			PIN_config = ((((GPIO_MODE_INPUT_FLO)<<2)| 0x0)&0x0f);
 80003b2:	2304      	movs	r3, #4
 80003b4:	73fb      	strb	r3, [r7, #15]
 80003b6:	e015      	b.n	80003e4 <MCAL_GPIO_INIT+0xbc>


		}else
		{
			PIN_config = ((((GPIO_MODE_INPUT_PULL_UP)<<2)| 0x0)&0x0f);
 80003b8:	2308      	movs	r3, #8
 80003ba:	73fb      	strb	r3, [r7, #15]
			if (pin_config->GPIO_Mode == GPIO_MODE_INPUT_PULL_UP){
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d107      	bne.n	80003d4 <MCAL_GPIO_INIT+0xac>
				GPIOX->ODR |= pin_config->GPIO_PinNumber;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	683a      	ldr	r2, [r7, #0]
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	431a      	orrs	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	e007      	b.n	80003e4 <MCAL_GPIO_INIT+0xbc>
			else
			{



				GPIOX->ODR &= ~(pin_config->GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	43d2      	mvns	r2, r2
 80003de:	401a      	ands	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	60da      	str	r2, [r3, #12]




	}
	(*configregerster) |= ((PIN_config) << GET_CRLH_Position(pin_config->GPIO_PinNumber));
 80003e4:	7bfc      	ldrb	r4, [r7, #15]
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff39 	bl	8000262 <GET_CRLH_Position>
 80003f0:	4603      	mov	r3, r0
 80003f2:	fa04 f203 	lsl.w	r2, r4, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	431a      	orrs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	601a      	str	r2, [r3, #0]


}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bd90      	pop	{r4, r7, pc}

08000408 <EXTI0_IRQHandler>:
}
//================================================================//
//ISR Functions

void EXTI0_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//clear pending register by set bit by 1
	EXTI->PR |= 1<<0;
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI0_IRQHandler+0x1c>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI0_IRQHandler+0x1c>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[0]();
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <EXTI0_IRQHandler+0x20>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4798      	blx	r3

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400
 8000428:	20000024 	.word	0x20000024

0800042c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <EXTI1_IRQHandler+0x1c>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <EXTI1_IRQHandler+0x1c>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[1]();
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <EXTI1_IRQHandler+0x20>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4798      	blx	r3


}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010400 	.word	0x40010400
 800044c:	20000024 	.word	0x20000024

08000450 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <EXTI2_IRQHandler+0x1c>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <EXTI2_IRQHandler+0x1c>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[2]();
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <EXTI2_IRQHandler+0x20>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4798      	blx	r3

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	20000024 	.word	0x20000024

08000474 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <EXTI3_IRQHandler+0x1c>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <EXTI3_IRQHandler+0x1c>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[3]();
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <EXTI3_IRQHandler+0x20>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4798      	blx	r3

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40010400 	.word	0x40010400
 8000494:	20000024 	.word	0x20000024

08000498 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <EXTI4_IRQHandler+0x1c>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <EXTI4_IRQHandler+0x1c>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[4]();
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <EXTI4_IRQHandler+0x20>)
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	4798      	blx	r3

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010400 	.word	0x40010400
 80004b8:	20000024 	.word	0x20000024

080004bc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5;GP_CALLBACK[5]();}
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI9_5_IRQHandler+0x22>
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a22      	ldr	r2, [pc, #136]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <EXTI9_5_IRQHandler+0xa4>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<6;GP_CALLBACK[6]();}
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 0320 	and.w	r3, r3, #32
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <EXTI9_5_IRQHandler+0x40>
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <EXTI9_5_IRQHandler+0xa4>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<7;GP_CALLBACK[7]();}
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	2b00      	cmp	r3, #0
 8000506:	d008      	beq.n	800051a <EXTI9_5_IRQHandler+0x5e>
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800050e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000512:	6153      	str	r3, [r2, #20]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <EXTI9_5_IRQHandler+0xa4>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<8;GP_CALLBACK[8]();}
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f003 0320 	and.w	r3, r3, #32
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <EXTI9_5_IRQHandler+0x7c>
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a0c      	ldr	r2, [pc, #48]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800052c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <EXTI9_5_IRQHandler+0xa4>)
 8000534:	6a1b      	ldr	r3, [r3, #32]
 8000536:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<9;GP_CALLBACK[9]();}
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f003 0320 	and.w	r3, r3, #32
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <EXTI9_5_IRQHandler+0x9a>
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI9_5_IRQHandler+0xa0>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054e:	6153      	str	r3, [r2, #20]
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI9_5_IRQHandler+0xa4>)
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	4798      	blx	r3


}void EXTI15_10_IRQHandler(void)
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000024 	.word	0x20000024

08000564 <EXTI15_10_IRQHandler>:
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10;GP_CALLBACK[10]();}
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <EXTI15_10_IRQHandler+0x22>
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 800057a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <EXTI15_10_IRQHandler+0xa4>)
 8000582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000584:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11;GP_CALLBACK[11]();}
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <EXTI15_10_IRQHandler+0x40>
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 8000598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <EXTI15_10_IRQHandler+0xa4>)
 80005a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a2:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12;GP_CALLBACK[12]();}
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <EXTI15_10_IRQHandler+0x5e>
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <EXTI15_10_IRQHandler+0xa4>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13;GP_CALLBACK[13]();}
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d008      	beq.n	80005e0 <EXTI15_10_IRQHandler+0x7c>
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <EXTI15_10_IRQHandler+0xa4>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14;GP_CALLBACK[14]();}
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d008      	beq.n	80005fe <EXTI15_10_IRQHandler+0x9a>
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <EXTI15_10_IRQHandler+0xa0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <EXTI15_10_IRQHandler+0xa4>)
 80005fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fc:	4798      	blx	r3


}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010400 	.word	0x40010400
 8000608:	20000024 	.word	0x20000024

0800060c <MCAL_RCC_GetSYS_CLKfreq>:



//--------------------------
uint32_t MCAL_RCC_GetSYS_CLKfreq(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	switch((RCC->CFGR>>2 )&0b11)
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MCAL_RCC_GetSYS_CLKfreq+0x30>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	f003 0303 	and.w	r3, r3, #3
 800061a:	2b01      	cmp	r3, #1
 800061c:	d006      	beq.n	800062c <MCAL_RCC_GetSYS_CLKfreq+0x20>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d302      	bcc.n	8000628 <MCAL_RCC_GetSYS_CLKfreq+0x1c>
 8000622:	2b02      	cmp	r3, #2
 8000624:	d004      	beq.n	8000630 <MCAL_RCC_GetSYS_CLKfreq+0x24>
 8000626:	e005      	b.n	8000634 <MCAL_RCC_GetSYS_CLKfreq+0x28>
	{
	case(0):
			return HSI_RC_CLK;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MCAL_RCC_GetSYS_CLKfreq+0x34>)
 800062a:	e003      	b.n	8000634 <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;
	case(1):

 			return HSE_CLK;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MCAL_RCC_GetSYS_CLKfreq+0x38>)
 800062e:	e001      	b.n	8000634 <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;
	case(2):
			return 16000000;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <MCAL_RCC_GetSYS_CLKfreq+0x38>)
 8000632:	e7ff      	b.n	8000634 <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;

	}


}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000
 8000640:	007a1200 	.word	0x007a1200
 8000644:	00f42400 	.word	0x00f42400

08000648 <MCAL_RCC_GetHCLKfreq>:

uint32_t MCAL_RCC_GetHCLKfreq(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetSYS_CLKfreq ()>> AHBPrescalTable[RCC->CFGR >> 4 & 0xf]);
 800064c:	f7ff ffde 	bl	800060c <MCAL_RCC_GetSYS_CLKfreq>
 8000650:	4601      	mov	r1, r0
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <MCAL_RCC_GetHCLKfreq+0x20>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	091b      	lsrs	r3, r3, #4
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <MCAL_RCC_GetHCLKfreq+0x24>)
 800065e:	5cd3      	ldrb	r3, [r2, r3]
 8000660:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	08000a14 	.word	0x08000a14

08000670 <MCAL_RCC_GetPCLK1freq>:

uint32_t MCAL_RCC_GetPCLK1freq(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLKfreq ()>> APBPrescalTable[RCC->CFGR >> 8 & 0b111]);
 8000674:	f7ff ffe8 	bl	8000648 <MCAL_RCC_GetHCLKfreq>
 8000678:	4601      	mov	r1, r0
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MCAL_RCC_GetPCLK1freq+0x20>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	f003 0307 	and.w	r3, r3, #7
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <MCAL_RCC_GetPCLK1freq+0x24>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	08000a0c 	.word	0x08000a0c

08000698 <MCAL_RCC_GetPCLK2freq>:
uint32_t MCAL_RCC_GetPCLK2freq(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLKfreq ()>> APBPrescalTable[RCC->CFGR >> 11 & 0b111]);
 800069c:	f7ff ffd4 	bl	8000648 <MCAL_RCC_GetHCLKfreq>
 80006a0:	4601      	mov	r1, r0
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MCAL_RCC_GetPCLK2freq+0x20>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	0adb      	lsrs	r3, r3, #11
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <MCAL_RCC_GetPCLK2freq+0x24>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	08000a0c 	.word	0x08000a0c

080006c0 <MCAL_UART_Init>:




void MCAL_UART_Init(USART_Type_Def* USARTx,USART_Coinf* USART_Config)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	Global_USART_Config = USART_Config;
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MCAL_UART_Init+0x140>)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	6013      	str	r3, [r2, #0]
	uint32_t pclock;


	//ENABLE CLK

	if(USARTx == USART1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a4c      	ldr	r2, [pc, #304]	; (8000804 <MCAL_UART_Init+0x144>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d106      	bne.n	80006e6 <MCAL_UART_Init+0x26>

		RCC_USART1_CLK_EN();
 80006d8:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <MCAL_UART_Init+0x148>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a4a      	ldr	r2, [pc, #296]	; (8000808 <MCAL_UART_Init+0x148>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	e014      	b.n	8000710 <MCAL_UART_Init+0x50>

	else if (USARTx == USART2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a48      	ldr	r2, [pc, #288]	; (800080c <MCAL_UART_Init+0x14c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <MCAL_UART_Init+0x3c>

		RCC_USART2_CLK_EN();
 80006ee:	4b46      	ldr	r3, [pc, #280]	; (8000808 <MCAL_UART_Init+0x148>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a45      	ldr	r2, [pc, #276]	; (8000808 <MCAL_UART_Init+0x148>)
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	e009      	b.n	8000710 <MCAL_UART_Init+0x50>


	else if (USARTx == USART3)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MCAL_UART_Init+0x150>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d105      	bne.n	8000710 <MCAL_UART_Init+0x50>

		RCC_USART3_CLK_EN();
 8000704:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MCAL_UART_Init+0x148>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a3f      	ldr	r2, [pc, #252]	; (8000808 <MCAL_UART_Init+0x148>)
 800070a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800070e:	6153      	str	r3, [r2, #20]



	//ENABLE USART

	USARTx->CR1 = (1<<13);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000716:	60da      	str	r2, [r3, #12]

	//ENABLE USART TX RX MODES

	USARTx->CR1 = USART_Config->USART_Mode;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60da      	str	r2, [r3, #12]

	//PAYLOAD LENGTH

	USARTx->CR1 = USART_Config->PayLoadLenght;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	7a1b      	ldrb	r3, [r3, #8]
 8000726:	461a      	mov	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]
	//PARIYT
	USARTx->CR1 = USART_Config->Parity;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60da      	str	r2, [r3, #12]
	//STOP BITS
	USARTx->CR1 = USART_Config->StopBits;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	7a9b      	ldrb	r3, [r3, #10]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
	//FLOW RATE
	USARTx->CR1 = USART_Config->HWFlowCTL;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	7adb      	ldrb	r3, [r3, #11]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60da      	str	r2, [r3, #12]


	if(USARTx == USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MCAL_UART_Init+0x144>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d103      	bne.n	800075a <MCAL_UART_Init+0x9a>
	{
		pclock = MCAL_RCC_GetPCLK2freq();
 8000752:	f7ff ffa1 	bl	8000698 <MCAL_RCC_GetPCLK2freq>
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	e002      	b.n	8000760 <MCAL_UART_Init+0xa0>
	}
	else
	{
		pclock = MCAL_RCC_GetPCLK1freq();
 800075a:	f7ff ff89 	bl	8000670 <MCAL_RCC_GetPCLK1freq>
 800075e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register (pclock , USART_Config->BaudRate));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	0119      	lsls	r1, r3, #4
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	009a      	lsls	r2, r3, #2
 8000778:	441a      	add	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	fbb2 f2f3 	udiv	r2, r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	fb00 f303 	mul.w	r3, r0, r3
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MCAL_UART_Init+0x154>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	095b      	lsrs	r3, r3, #5
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	430b      	orrs	r3, r1
 80007a8:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	609a      	str	r2, [r3, #8]

	//enable and disable intrup.

	if(USART_Config->IRQ_ENABLE != USART_IRQ_ENABLE_NONE)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	7b1b      	ldrb	r3, [r3, #12]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d01f      	beq.n	80007f8 <MCAL_UART_Init+0x138>
	{
		//NVIC ENABLE

		if(USARTx == USART1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MCAL_UART_Init+0x144>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d106      	bne.n	80007ce <MCAL_UART_Init+0x10e>

			NVIC_IRQ37_USART1_ENABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MCAL_UART_Init+0x158>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MCAL_UART_Init+0x158>)
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	6013      	str	r3, [r2, #0]
	//BRR = UART_BRR_Register(pclock,USART_Config->BaudRate);

	//USARTx->BRR =BRR;


}
 80007cc:	e014      	b.n	80007f8 <MCAL_UART_Init+0x138>
		else if (USARTx == USART2 )
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MCAL_UART_Init+0x14c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <MCAL_UART_Init+0x124>
			NVIC_IRQ38_USART2_ENABLE;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MCAL_UART_Init+0x158>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MCAL_UART_Init+0x158>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	e009      	b.n	80007f8 <MCAL_UART_Init+0x138>
		else if (USARTx == USART3)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <MCAL_UART_Init+0x150>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d105      	bne.n	80007f8 <MCAL_UART_Init+0x138>
			NVIC_IRQ39_USART3_ENABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MCAL_UART_Init+0x158>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <MCAL_UART_Init+0x158>)
 80007f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000001c 	.word	0x2000001c
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	40004400 	.word	0x40004400
 8000810:	40004800 	.word	0x40004800
 8000814:	51eb851f 	.word	0x51eb851f
 8000818:	e000e104 	.word	0xe000e104

0800081c <MCAL_UART_SendData>:


}

void MCAL_UART_SendData(USART_Type_Def* USARTx,uint16_t* PTxBuffer,enum pulling_mechanism Pulling_EN)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	4613      	mov	r3, r2
 8000828:	71fb      	strb	r3, [r7, #7]
	if (Pulling_EN == enable)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d106      	bne.n	800083e <MCAL_UART_SendData+0x22>
	{
		while(!(USARTx->SR & 1<<7));
 8000830:	bf00      	nop
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <MCAL_UART_SendData+0x16>

	if (Global_USART_Config->PayLoadLenght == USART_PayLoad_Length_9B)
	{
		USARTx->DR = (*PTxBuffer & (uint16_t) 0x01FF);

	}else if (Global_USART_Config->PayLoadLenght == USART_PayLoad_Length_8B)
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <MCAL_UART_SendData+0x40>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	7a1b      	ldrb	r3, [r3, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <MCAL_UART_SendData+0x36>
	{
		USARTx->DR = (*PTxBuffer & (uint8_t) 0xFF);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	605a      	str	r2, [r3, #4]


	}

}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	2000001c 	.word	0x2000001c

08000860 <MCAL_UART_ReceiveData>:
{
	while (!(USARTx->SR & 1<<6));
}

void MCAL_UART_ReceiveData(USART_Type_Def* USARTx,uint16_t* PTxBuffer,enum pulling_mechanism Pulling_EN)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	4613      	mov	r3, r2
 800086c:	71fb      	strb	r3, [r7, #7]
	if (Pulling_EN == enable)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <MCAL_UART_ReceiveData+0x22>
	{
		while(!(USARTx->SR & 1<<5));
 8000874:	bf00      	nop
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <MCAL_UART_ReceiveData+0x16>


	}else
	{
		//for 8 bit data
		if (Global_USART_Config->Parity == USART_Parity_NONE)
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MCAL_UART_ReceiveData+0x58>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <MCAL_UART_ReceiveData+0x3c>
		{
			*((uint16_t*)(PTxBuffer)) = (USARTx->DR & (uint8_t) 0xFF);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	801a      	strh	r2, [r3, #0]





}
 800089a:	e007      	b.n	80008ac <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*)(PTxBuffer)) = (USARTx->DR & (uint8_t) 0x7F);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	801a      	strh	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000001c 	.word	0x2000001c

080008bc <MCAL_UART_GPIO_Set_Pins>:




void MCAL_UART_GPIO_Set_Pins(USART_Type_Def* USARTx)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg;

	if(USARTx == USART1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d118      	bne.n	80008fe <MCAL_UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008e2:	f7ff fd21 	bl	8000328 <MCAL_GPIO_INIT>


		//PA10 RX
		pincfg.GPIO_PinNumber= GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80008ec:	2308      	movs	r3, #8
 80008ee:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4820      	ldr	r0, [pc, #128]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008f8:	f7ff fd16 	bl	8000328 <MCAL_GPIO_INIT>

		}
	}


}
 80008fc:	e036      	b.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d116      	bne.n	8000934 <MCAL_UART_GPIO_Set_Pins+0x78>
		pincfg.GPIO_PinNumber = GPIO_PIN_2;
 8000906:	2304      	movs	r3, #4
 8000908:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 800090a:	2306      	movs	r3, #6
 800090c:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800091a:	f7ff fd05 	bl	8000328 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber= GPIO_PIN_3;
 800091e:	2308      	movs	r3, #8
 8000920:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000922:	2308      	movs	r3, #8
 8000924:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800092e:	f7ff fcfb 	bl	8000328 <MCAL_GPIO_INIT>
}
 8000932:	e01b      	b.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d117      	bne.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
		pincfg.GPIO_PinNumber = GPIO_PIN_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000942:	2306      	movs	r3, #6
 8000944:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOB, &pincfg);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000952:	f7ff fce9 	bl	8000328 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber= GPIO_PIN_11;
 8000956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800095a:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 800095c:	2308      	movs	r3, #8
 800095e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOB, &pincfg);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000968:	f7ff fcde 	bl	8000328 <MCAL_GPIO_INIT>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40013800 	.word	0x40013800
 8000978:	40010800 	.word	0x40010800
 800097c:	40004400 	.word	0x40004400
 8000980:	40004800 	.word	0x40004800
 8000984:	40010c00 	.word	0x40010c00

08000988 <USART1_IRQHandler>:

//ISR

void USART1_IRQHandler (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <__libc_init_array>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	2500      	movs	r5, #0
 80009b0:	4e0c      	ldr	r6, [pc, #48]	; (80009e4 <__libc_init_array+0x38>)
 80009b2:	4c0d      	ldr	r4, [pc, #52]	; (80009e8 <__libc_init_array+0x3c>)
 80009b4:	1ba4      	subs	r4, r4, r6
 80009b6:	10a4      	asrs	r4, r4, #2
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	d109      	bne.n	80009d0 <__libc_init_array+0x24>
 80009bc:	f000 f81a 	bl	80009f4 <_init>
 80009c0:	2500      	movs	r5, #0
 80009c2:	4e0a      	ldr	r6, [pc, #40]	; (80009ec <__libc_init_array+0x40>)
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <__libc_init_array+0x44>)
 80009c6:	1ba4      	subs	r4, r4, r6
 80009c8:	10a4      	asrs	r4, r4, #2
 80009ca:	42a5      	cmp	r5, r4
 80009cc:	d105      	bne.n	80009da <__libc_init_array+0x2e>
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d4:	4798      	blx	r3
 80009d6:	3501      	adds	r5, #1
 80009d8:	e7ee      	b.n	80009b8 <__libc_init_array+0xc>
 80009da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009de:	4798      	blx	r3
 80009e0:	3501      	adds	r5, #1
 80009e2:	e7f2      	b.n	80009ca <__libc_init_array+0x1e>
 80009e4:	08000a24 	.word	0x08000a24
 80009e8:	08000a24 	.word	0x08000a24
 80009ec:	08000a24 	.word	0x08000a24
 80009f0:	08000a28 	.word	0x08000a28

080009f4 <_init>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	bf00      	nop
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr

08000a00 <_fini>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr
